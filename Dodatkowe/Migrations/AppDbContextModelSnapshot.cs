// <auto-generated />
using System;
using Dodatkowe.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Dodatkowe.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.6");

            modelBuilder.Entity("Dodatkowe.Models.Event", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Date")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("MaxParticipants")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Events");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Date = new DateTime(2025, 7, 1, 10, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Wprowadzamy innowacje!",
                            MaxParticipants = 100,
                            Title = "PJATK 2025"
                        },
                        new
                        {
                            Id = 2,
                            Date = new DateTime(2025, 7, 5, 12, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Nadrabiamy punkty!",
                            MaxParticipants = 50,
                            Title = "APBD - dodatkowe zadanie"
                        });
                });

            modelBuilder.Entity("Dodatkowe.Models.EventSpeaker", b =>
                {
                    b.Property<int>("EventId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("EventId");

                    b.Property<int>("SpeakerId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("SpeakerId");

                    b.HasKey("EventId", "SpeakerId");

                    b.HasIndex("SpeakerId");

                    b.ToTable("EventSpeakers");

                    b.HasData(
                        new
                        {
                            EventId = 1,
                            SpeakerId = 1
                        },
                        new
                        {
                            EventId = 2,
                            SpeakerId = 2
                        });
                });

            modelBuilder.Entity("Dodatkowe.Models.Participant", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("TEXT");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Participants");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "pawel@gmail.com",
                            FullName = "Pawel Borys"
                        },
                        new
                        {
                            Id = 2,
                            Email = "andrzej@wp.pl",
                            FullName = "Andrzej Sapkowski"
                        });
                });

            modelBuilder.Entity("Dodatkowe.Models.Registration", b =>
                {
                    b.Property<int>("EventId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("EventId");

                    b.Property<int>("ParticipantId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("ParticipantId");

                    b.Property<bool>("Cancelled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("RegistrationDate")
                        .HasColumnType("TEXT");

                    b.HasKey("EventId", "ParticipantId");

                    b.HasIndex("ParticipantId");

                    b.ToTable("Registrations");

                    b.HasData(
                        new
                        {
                            EventId = 1,
                            ParticipantId = 1,
                            Cancelled = false,
                            RegistrationDate = new DateTime(2025, 8, 18, 12, 0, 0, 0, DateTimeKind.Utc)
                        });
                });

            modelBuilder.Entity("Dodatkowe.Models.Speaker", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Speakers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            FullName = "Mikolaj Rafalski"
                        },
                        new
                        {
                            Id = 2,
                            FullName = "Rafal Mikolajski"
                        });
                });

            modelBuilder.Entity("Dodatkowe.Models.EventSpeaker", b =>
                {
                    b.HasOne("Dodatkowe.Models.Event", "Event")
                        .WithMany("EventSpeakers")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Dodatkowe.Models.Speaker", "Speaker")
                        .WithMany("EventSpeakers")
                        .HasForeignKey("SpeakerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");

                    b.Navigation("Speaker");
                });

            modelBuilder.Entity("Dodatkowe.Models.Registration", b =>
                {
                    b.HasOne("Dodatkowe.Models.Event", "Event")
                        .WithMany("Registrations")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Dodatkowe.Models.Participant", "Participant")
                        .WithMany("Registrations")
                        .HasForeignKey("ParticipantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");

                    b.Navigation("Participant");
                });

            modelBuilder.Entity("Dodatkowe.Models.Event", b =>
                {
                    b.Navigation("EventSpeakers");

                    b.Navigation("Registrations");
                });

            modelBuilder.Entity("Dodatkowe.Models.Participant", b =>
                {
                    b.Navigation("Registrations");
                });

            modelBuilder.Entity("Dodatkowe.Models.Speaker", b =>
                {
                    b.Navigation("EventSpeakers");
                });
#pragma warning restore 612, 618
        }
    }
}
